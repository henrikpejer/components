<?php
/**
 * Created by PhpStorm.
 * User: henrikpejer
 * Date: 2018-10-14
 * Time: 19:21
 */

namespace DHP\tests\components\container;

use DHP\components\container\ContainerInterface;
use DHP\components\container\Registry;
use DHP\components\container\Unicorn;
use DHP\components\request\Request;
use PHPUnit\Framework\TestCase;

class UnicornTest extends TestCase
{
    /** @var ContainerInterface */
    private $container;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->container = new Unicorn();
    }

    public function testSettingObjectWithAlias()
    {
        ## test adding an object and then getting it back, ok?
        $testObject    = new Registry();
        $testObjectSpl = \spl_object_hash($testObject);
        $this->container->set($testObject, 'reg');
        $this->assertEquals(
            $testObjectSpl,
            \spl_object_hash($this->container->get('reg'))
        );
        $this->assertEquals(
            $testObjectSpl,
            \spl_object_hash($this->container->get('DHP\components\container\Registry'))
        );
    }

    public function testSettingStringForObject()
    {
        $this->container->set('DHP\components\container\Registry', 'reg');
        $reg  = $this->container->get('reg');
        $reg2 = $this->container->get('DHP\components\container\Registry');
        $reg3 = $this->container->get('\DHP\components\container\Registry');

        $this->assertEquals(
            \spl_object_hash($reg),
            \spl_object_hash($reg3)
        );
        $this->assertEquals(
            \spl_object_hash($reg),
            \spl_object_hash($reg2)
        );
    }

    public function testAddingObjectWithMethodCalls()
    {
        $callable = function () {
            return Request::createFromEnvironment();
        };

        $this->container->set($callable, ['request', '\\DHP\\components\\request\\Request']);
        $request = $this->container->get('request');
        $assertAgainst = realpath(__DIR__ . '/../../../vendor/phpunit/phpunit');
        if (!empty($_SERVER['SCRIPT_NAME'])) {
          $assertAgainst = dirname($_SERVER['SCRIPT_NAME']);
        }
        $this->assertEquals($assertAgainst, $request->getUri());
    }

    public function testLoadingObjectWithConstructor()
    {
        $registry = [
            '\\DHP\\components\\request\\RequestInterface' => ['\\DHP\\components\\request\\Request'],
            '\\DHP\\components\\response\\ResponseInterface' => ['\\DHP\\components\\response\\Response'],
        ];
        $this->container->setRegistry($registry);
        $this->container->set('DHP\\components\\response\\Response', 'response');
        $response = $this->container->get('DHP\\components\\response\\Response');
        $this->assertEquals('DHP\\components\\response\\Response', \get_class($response));
        $this->assertEquals(
            \spl_object_hash($response),
            \spl_object_hash($this->container->get('DHP\\components\\response\\ResponseInterface'))
        );
    }

    public function testWithConstructorArguments()
    {
        $request = Request::createFromEnvironment();
        $this->container->set(
            'DHP\\components\\response\\Response',
            'response',
            false,
            $request
        );
        $response = $this->container->get('DHP\\components\\response\\Response');
        $this->assertEquals('DHP\\components\\response\\Response', \get_class($response));
    }

    public function testWithConstructorArgumentsInGet()
    {
        $this->container->set(
            'DHP\\components\\request\\Request',
            'request'
        );
        $request = $this->container->get('request', 'LATTJO');
        $this->assertEquals('LATTJO', $request->getMethod());
    }

    public function testWithConstructorArgumentsInSet()
    {
        $this->container->set(
            'DHP\\components\\request\\Request',
            'request',
            false,
            'LATTJO'
        );
        $request = $this->container->get('request');
        $this->assertEquals('LATTJO', $request->getMethod());
    }
}
